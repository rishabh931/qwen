import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO

st.set_page_config(layout="wide", page_title="Screener.in Analyzer")

def clean_screener_data(df):
    """Fix Screener.in's inconsistent Excel format"""
    # Find year columns (handles "2023-24", "Mar 2024", etc.)
    year_cols = [col for col in df.columns if any(x in str(col) for x in ['20', 'Mar', 'Dec'])]
    
    # Extract metric names from first column
    df = df.rename(columns={df.columns[0]: 'Metric'})
    df = df.set_index('Metric')
    
    # Clean data: remove %, convert '-' to 0, handle commas
    df = df.replace('-', '0', regex=True)
    df = df.replace('%', '', regex=True)
    df = df.replace(',', '', regex=True)
    df = df.apply(pd.to_numeric, errors='coerce').fillna(0)
    
    # Transpose for proper time-series
    df = df[year_cols].T
    df.index = pd.to_datetime(df.index, errors='coerce').strftime('%Y')
    return df

def generate_dashboard(df):
    st.title("📊 Screener.in Stock Analyzer")
    
    # Key Health Metrics
    st.subheader("⚡ Financial Health Snapshot")
    col1, col2, col3, col4 = st.columns(4)
    
    latest_year = df.index[-1]
    with col1:
        roce = df['ROCE %'].iloc[-1]
        st.metric("ROCE", f"{roce:.1f}%", delta=f"{df['ROCE %'].pct_change().iloc[-1]:.1%}")
        if roce < 15: st.error("⚠️ Below ideal (15%+)")
    
    with col2:
        debt = df['Debt to Equity'].iloc[-1]
        st.metric("Debt/Equity", f"{debt:.2f}x", 
                 delta=f"{df['Debt to Equity'].pct_change().iloc[-1]:.1%}")
        if debt > 2: st.error("🔥 High Risk!")
    
    with col3:
        roe = df['ROE %'].iloc[-1]
        st.metric("ROE", f"{roe:.1f}%", delta=f"{df['ROE %'].pct_change().iloc[-1]:.1%}")
        if roe < 12: st.warning("⚠️ Needs monitoring")
    
    with col4:
        current_ratio = df['Current Ratio'].iloc[-1] if 'Current Ratio' in df else 0
        st.metric("Current Ratio", f"{current_ratio:.2f}x")
        if current_ratio < 1.5: st.warning("⚠️ Liquidity risk")

    # Trend Analysis
    st.subheader("📈 5-Year Trend Analysis")
    tab1, tab2, tab3 = st.tabs(["Profitability", "Debt Health", "Growth"])
    
    with tab1:
        fig1 = go.Figure()
        fig1.add_trace(go.Scatter(x=df.index, y=df['ROCE %'], name='ROCE', line=dict(color='#2ecc71', width=3)))
        fig1.add_trace(go.Scatter(x=df.index, y=df['ROE %'], name='ROE', line=dict(color='#3498db', width=3, dash='dash')))
        fig1.update_layout(title='ROCE vs ROE Trend', yaxis_title='%', hovermode='x')
        st.plotly_chart(fig1, use_container_width=True)
    
    with tab2:
        fig2 = go.Figure()
        fig2.add_trace(go.Bar(x=df.index, y=df['Debt to Equity'], name='Debt/Equity', marker_color='#e74c3c'))
        fig2.add_hline(y=2, line_dash="dash", line_color="red", annotation_text="Danger Zone (>2)")
        fig2.update_layout(title='Debt-to-Equity Trend', yaxis_title='x', hovermode='x')
        st.plotly_chart(fig2, use_container_width=True)
    
    with tab3:
        fig3 = go.Figure()
        fig3.add_trace(go.Scatter(x=df.index, y=df['Sales Growth %'], name='Revenue', line=dict(color='#9b59b6')))
        fig3.add_trace(go.Scatter(x=df.index, y=df['Profit Growth %'], name='Profit', line=dict(color='#e67e22')))
        fig3.update_layout(title='Revenue vs Profit Growth', yaxis_title='%', hovermode='x')
        st.plotly_chart(fig3, use_container_width=True)

    # Peer Comparison (if available)
    if 'Peer' in df.columns:
        st.subheader("🌍 Peer Comparison")
        peer_cols = [col for col in df.columns if 'Peer' in col]
        peer_data = df[peer_cols].iloc[-1].str.rstrip('%').astype(float)
        
        fig4 = px.bar(peer_data, 
                     title='Key Metrics vs Industry Peers (Latest Quarter)',
                     labels={'value': 'Value', 'index': 'Metric'},
                     color_discrete_sequence=['#3498db'])
        st.plotly_chart(fig4, use_container_width=True)

    # Raw Data & Export
    with st.expander("🔍 Raw Data Table"):
        st.dataframe(df)
    
    # PDF Export
    st.download_button(
        label="📥 Download Analysis Report (PDF)",
        data=generate_pdf(df),
        file_name="stock_analysis.pdf",
        mime="application/pdf"
    )

def generate_pdf(df):
    """Dummy PDF generator - replace with actual PDF creation"""
    return BytesIO(b"Stock Analysis Report\nGenerated by Screener.in Analyzer Tool")

# Main App
st.sidebar.header("Upload Screener.in Excel")
uploaded_file = st.sidebar.file_uploader("Drag & drop Screener.in export", type=["xlsx"])

if uploaded_file:
    try:
        # Read Excel (handles Screener.in's multi-header)
        df = pd.read_excel(uploaded_file, header=1)
        df = clean_screener_data(df)
        
        # Verify critical columns exist
        required = ['ROCE %', 'ROE %', 'Debt to Equity']
        if not all(col in df.columns for col in required):
            st.error("❌ Required metrics missing! Did you export FULL history from Screener.in?")
            st.stop()
        
        generate_dashboard(df)
        
        st.sidebar.success("✅ Analysis Ready!")
        st.sidebar.caption(f"Company: {uploaded_file.name.split('.')[0].title()}")
    
    except Exception as e:
        st.error(f"⚠️ Data processing error: {str(e)}")
        st.sidebar.error("❌ Invalid Screener.in format")
else:
    st.sidebar.info("👉 Upload Screener.in Excel file to start")
    st.markdown("""
    ### How to Use:
    1. **Export from Screener.in**: 
       - Go to company page → Click **"Export to Excel"** → Select **"Full History"**
    2. **Upload here**: Drag the Excel file into the sidebar
    3. **Get instant analysis**: Charts, health checks, and peer comparison
    
    > 💡 **Pro Tip**: Works best with **10+ years of data**. For peer comparison, export the "Peer Comparison" tab too!
    """)
